class Node:
    def __init__(self, key, value):
        self.freq = 1
        self.key =key
        self.val= value
        self.next = self.prev= None

class DoubleLinkedList:
    def __init__(self):
        self.dummy = Node(None, None)
        self.dummy.prev= self.dummy.next = self.dummy
        self.size= 0
    
    def __len__(self):
        return self.size
    
    def append(self, node):
        node.next = self.dummy.next
        node.prev = self.dummy
        self.dummy.next.prev= node
        self.dummy.next= node
        self.size+=1
        
    def pop(self, node=None):
        if self.size==0:
            return 
        if node==None:
            node = self.dummy.prev
        
        node.prev.next, node.next.prev= node.next, node.prev
        self.size-=1
        return node
        
            
        



class LFUCache:

    def __init__(self, capacity: int):
        self.node = collections.defaultdict(Node)
        self.freq = collections.defaultdict(DoubleLinkedList)
        self.size= 0
        self.capacity = capacity
        self.minFreq= 0
    
    def update(self, node):
        freq = node.freq
        self.freq[freq].pop(node)
        if freq==self.minFreq and not self.freq[freq]:
            self.minFreq+=1
        node.freq+=1
        self.freq[node.freq].append(node)
        
    def get(self, key: int) -> int:
        if key in self.node:
            curNode = self.node[key]
            self.update(curNode)
            return curNode.val
        return -1
        

    def put(self, key: int, value: int) -> None:
        if self.capacity==0: return
        if key in self.node:
            curNode= self.node[key]
            self.update(curNode)
            curNode.val = value
        else:
            if self.size==self.capacity:
                curNode = self.freq[self.minFreq].pop()
                del self.node[curNode.key]
                self.size-=1
            newNode = Node(key, value)
            self.node[key] = newNode
            self.freq[1].append(newNode)
            self.minFreq=1
            self.size+=1
            
                
                

